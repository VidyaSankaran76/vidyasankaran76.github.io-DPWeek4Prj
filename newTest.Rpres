Data Products Shiny Project - Week 4  
========================================================
author: Vidya Sankaran
date: 05/Feb/2018
autosize: true

Executive Summary
========================================================


This Shiny Applicaiton is predicting the weight of Chicken, with given inputs.
There are two models considered in this application.

- Model 1 : This model predicts the weight of chicken with the predictors "Time"" (Age of Chicken in months) and "Chick" Type of Chicken. There are about 50 varieties of Chicken considered in the dataset. Select the Age and type of chicken through slider inputs. Then check the model1 button and submit. The response will be displayed as output. 

- Model 2: This model predicts the weight of chicken with the predictors Time (Age of Chicken in months) and "Diet" type of diet for chicken. There are about 4 diet levels for the chicken, and consider the Diet and the Age of inputs and check for model2 radio button and submit. The reponse will be displayed as output.

Code Repository
========================================================

server.R and ui.R files are in following repository
https://github.com/VidyaSankaran76/vidyasankaran76.github.io-DPWeek4Prj
There is an Rmd file, which has the shiny code built in and this file is compiled and knitted
the shiny application shall run in others own PC.

Code Execution
========================================================
Following code is an attempt to run the shiny in R presenter. It has some errors displayed,
but still the shiny code is hosted in local PC environment. 

The Rpresenter code is uploaded in github, for your reference. You can download and try running the same.  The error will be displayed, but still the local PC runs the shiny App object.
https://github.com/VidyaSankaran76/vidyasankaran76.github.io-DPWeek4Prj


```{r  , echo=FALSE, message=FALSE, results='asis'}
library(shiny)
#slidy_presentation: default
# Define UI for application
dietSelection <- list("one"="1", "two"="2","three"="3", "four"="4")
selection <- list("Model1: Age & Type of Chick" =1, "Model2: Age & Type of Diet"=2)


ui <- fluidPage(
  
 titlePanel("Predict Chicken Weight by Age, Type & Diet"),
 
  # Sidebar with a slider input for number of bins 
  sidebarLayout(
    sidebarPanel(
       sliderInput("Time1",
                   "Chick Age in months:",
                   min = 0.00,
                   max = 21.00,
                   value = 10.00),

       sliderInput("choiceC","Type of Chicken",min=1, max=50, value=18),
       selectInput("choiceD", "Type of Diet:", choices=dietSelection, selected="1"),
       radioButtons("show1","Model1 or Model2",choices=selection, selected=1),
       #checkboxInput("show2", "Show or Hide Model 2 Response", value=FALSE),
       submitButton("Done")
       
    ),
    
    # Show a plot of the generated distribution
    mainPanel(
       plotOutput("Plot"),
       h3("Predictied Weight of Model"),
       textOutput("predict1")
   #    h3("Predicted Weight of Model2"),
   #    textOutput("predict2")
    )
  )

  
)

server <- function(input, output, session) {
 data(ChickWeight)
  library(dplyr)
  # model1 and model 2 for predicting the values
  model1 <- lm(weight~Time+Chick, data=ChickWeight)
  model2 <- lm(weight ~ Time+Diet, data=ChickWeight)
  #reactive function for computing predictions
  model1Out <- reactive ({
    msgInput <- data.frame("Time"= input$Time1, "Chick"=as.character(input$choiceC), "Diet"=input$choiceD)  
    #msgInput <- data.frame(Time=2, Chick="15", Diet="2" )
    predict1 <- predict(model1, newdata=msgInput)
    predict1
  })
  model2Out <- reactive ({
    msgInput <- data.frame("Time"= input$Time1, "Chick"=input$choiceC, "Diet"=input$choiceD)  
    predict2 <- predict(model2, newdata=msgInput)
    predict2
  })

  # plot for the server. 

   output$Plot <- renderPlot({
    
   msgInput <- data.frame("Time"= input$Time1, "Chick"=input$choiceC, "Diet"=input$choiceD)  
  
    if(input$show1== 1) { 
      plot(x=input$Time1, y=model1Out(), pch=19, col="green", xlab="Ages in Months", 
            main="Predicted Chicken Weight", ylab="Weight in grams")

      output$predict1 <- renderText({ model1Out() }) 
    }
    else {
     plot(x=input$Time1, y=model2Out(), pch=19, col="green", xlab="Age in Months", 
           main="Predicted Chicken Weight", ylab="Weight in grams") 
      output$predict1 <- renderText({ model2Out()  })
      
   }
  }) 
}

shinyApp(ui, server)
```

